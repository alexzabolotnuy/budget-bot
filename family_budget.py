import logging
from telegram import Update, ReplyKeyboardMarkup, BotCommand
from telegram.ext import (ApplicationBuilder, CommandHandler, ContextTypes,
                          ConversationHandler, MessageHandler, filters)
import datetime
import gspread
import json
import os
from oauth2client.service_account import ServiceAccountCredentials
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from collections import defaultdict

# ============ CONFIG LOAD ============
config = json.loads(os.getenv("BOT_CONFIG_JSON"))
print("BOT_CONFIG_JSON:", os.getenv("BOT_CONFIG_JSON"))

TOKEN = config['telegram_token']
ALLOWED_USERS = config.get('allowed_user_ids', [])
SPREADSHEET_ID = config.get('sheet_name', '1y039e2_zew51s0kQFUijIiX6_bq29Jx4U-7upo1nTts')

# ============ GOOGLE SHEETS INIT ============
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]
creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
creds = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(creds_json), scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# ============ CONSTANTS ============
CATEGORY, AMOUNT, COMMENT = range(3)

CATEGORIES = [
    "–û—Ä–µ–Ω–¥–∞", "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "–ù—è–Ω—è/–°–∞–¥–æ–∫", "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è",
    "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è + –ü–æ–±—É—Ç/–≥—ñ–≥—ñ—î–Ω–∞", "–®–æ–ø—ñ–Ω–≥", "–†–æ–∑–≤–∞–≥–∏/–∑–∞–∫–ª–∞–¥–∏",
    "–°–ø–æ—Ä—Ç", "–ú–µ–¥–µ—Ü–∏–Ω–∞", "–ê–≤—Ç–æ(–±–µ–Ω–∑)",
    "–†–µ–∑–µ—Ä–≤ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–Ω—è"
]

CATEGORY_LIMITS = {
    "–û—Ä–µ–Ω–¥–∞": 8000,
    "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": 2522,
    "–ù—è–Ω—è/–°–∞–¥–æ–∫": 4000,
    "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è": 10600,
    "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è + –ü–æ–±—É—Ç/–≥—ñ–≥—ñ—î–Ω–∞": 2170,
    "–®–æ–ø—ñ–Ω–≥": 742,
    "–†–æ–∑–≤–∞–≥–∏/–∑–∞–∫–ª–∞–¥–∏": 1060,
    "–ú–µ–¥–µ—Ü–∏–Ω–∞": 870,
    "–°–ø–æ—Ä—Ç": 244,
    "–ê–≤—Ç–æ(–±–µ–Ω–∑)": 708,
    "–†–µ–∑–µ—Ä–≤ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–Ω—è": 1272,
}

# ============ HELPERS ============
def get_total_expenses_per_category(category):
    records = sheet.get_all_records()
    total = sum(float(row['–°—É–º–∞']) for row in records if row['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'] == category)
    return total

def get_main_menu():
    keyboard = [
        ["üí∞ –ë–∞–ª–∞–Ω—Å"],
        ["‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üìÖ –ó–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"],
        ["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_category_keyboard():
    keyboard = []
    row = []
    for i, cat in enumerate(CATEGORIES, 1):
        row.append(cat)
        if i % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# ============ BOT LOGIC ============
logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if ALLOWED_USERS and user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return ConversationHandler.END

    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())
    return ConversationHandler.END

async def start_expense_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=get_category_keyboard())
    return CATEGORY

async def category_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    if category == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())
        return ConversationHandler.END
    if category not in CATEGORIES:
        await update.message.reply_text("‚ùó –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return CATEGORY
    context.user_data['category'] = category
    await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏ (–≤ z≈Ç):")
    return AMOUNT

async def amount_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(',', '.'))
        context.user_data['amount'] = amount
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä (–∞–±–æ '-' —è–∫—â–æ –Ω–µ–º–∞—î):")
        return COMMENT
    except ValueError:
        await update.message.reply_text("‚ùó –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return AMOUNT

async def comment_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    category = context.user_data.get('category')
    amount = context.user_data.get('amount')
    username = update.message.from_user.first_name
    date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")

    sheet.append_row([date_str, username, category, amount, comment])

    spent = get_total_expenses_per_category(category)
    limit = CATEGORY_LIMITS.get(category, 0)
    remaining = limit - spent
    percent = (spent / limit) * 100 if limit > 0 else 0

    await update.message.reply_text(
        f"‚úÖ –í–∏—Ç—Ä–∞—Ç—É –¥–æ–¥–∞–Ω–æ:\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category} = {amount:.2f} z≈Ç\n"
        f"{limit:.0f} / {spent:.2f} ‚Üí –ó–∞–ª–∏—à–æ–∫: {remaining:.2f} z≈Ç ({100 - percent:.0f}%)",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu())
    return ConversationHandler.END

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = "\U0001F4C8 –ë–∞–ª–∞–Ω—Å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:\n"
    for cat in CATEGORIES:
        spent = get_total_expenses_per_category(cat)
        limit = CATEGORY_LIMITS.get(cat, 0)
        remaining = limit - spent
        percent = (spent / limit * 100) if limit else 0
        message += f"‚Ä¢ {cat}: {spent:.2f} / {limit} ‚Üí –ó–∞–ª–∏—à–æ–∫: {remaining:.2f} z≈Ç ({100 - percent:.0f}%)\n"
    await update.message.reply_text(message, reply_markup=get_main_menu())

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now()
    month_start = datetime.datetime(now.year, now.month, 1)
    records = sheet.get_all_records()
    month_records = [r for r in records if datetime.datetime.strptime(r['–î–∞—Ç–∞'], "%Y-%m-%d %H:%M") >= month_start]

    totals = defaultdict(float)
    for row in month_records:
        totals[row['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è']] += float(row['–°—É–º–∞'])

    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {now.strftime('%B %Y')}\n"
    for cat in CATEGORIES:
        spent = totals.get(cat, 0)
        limit = CATEGORY_LIMITS.get(cat, 0)
        percent = (spent / limit) * 100 if limit > 0 else 0
        message += f"‚Ä¢ {cat}: {spent:.2f} / {limit} z≈Ç ({percent:.0f}%)\n"

    # Top-3 categories
    top = sorted(totals.items(), key=lambda x: x[1], reverse=True)[:3]
    message += "\nüèÜ –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏:\n"
    for cat, val in top:
        message += f"{cat}: {val:.2f} z≈Ç\n"

    await update.message.reply_text(message, reply_markup=get_main_menu())

async def send_daily_report(context: ContextTypes.DEFAULT_TYPE, manual_user_id=None):
    now_date = datetime.datetime.now().strftime("%Y-%m-%d")
    records = sheet.get_all_records()
    today_records = [r for r in records if r['–î–∞—Ç–∞'].startswith(now_date)]

    if not today_records:
        return

    # First message: all expenses of the day
    lines = [f"üìÖ –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ {now_date}:"]
    for row in today_records:
        lines.append(f"‚Ä¢ {row['–°—É–º–∞']} z≈Ç ‚Äì {row['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è']} ({row['–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á']})")
    report_text_1 = "\n".join(lines)

    # Second message: total per category and total
    totals = defaultdict(float)
    for row in today_records:
        totals[row['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è']] += float(row['–°—É–º–∞'])
    total_sum = sum(totals.values())
    report_lines = ["üìä –ü—ñ–¥—Å—É–º–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:"]
    for cat, val in totals.items():
        report_lines.append(f"‚Ä¢ {cat}: {val:.2f} z≈Ç")
    report_lines.append(f"\nüí∏ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –¥–µ–Ω—å: {total_sum:.2f} z≈Ç")
    report_text_2 = "\n".join(report_lines)

    targets = [manual_user_id] if manual_user_id else ALLOWED_USERS
    for user_id in targets:
        try:
            await context.bot.send_message(chat_id=user_id, text=report_text_1)
            await context.bot.send_message(chat_id=user_id, text=report_text_2)
        except Exception as e:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

async def manual_daily_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_daily_report(context, manual_user_id=update.effective_user.id)

# ============ MAIN ============
def main():
    application = ApplicationBuilder().token(TOKEN).build()

    async def post_init(app):
        await app.bot.set_my_commands([
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ / –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
            BotCommand("balance", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å"),
            BotCommand("add", "–î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"),
            BotCommand("cancel", "–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ—é"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å"),
            BotCommand("report", "–ó–≤—ñ—Ç –∑–∞ –¥–µ–Ω—å")
        ])
        scheduler.start()

    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_daily_report, 'cron', hour=21, minute=0, args=[application.bot])

    application.post_init = post_init

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É$"), start_expense_add)
        ],
        states={
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category_chosen)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_entered)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment_entered)],
        },
        fallbacks=[MessageHandler(filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏$"), cancel)],
        allow_reentry=True,
        per_message=False,
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("report", manual_daily_report))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex("^üí∞ –ë–∞–ª–∞–Ω—Å$"), show_balance))
    application.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_statistics))
    application.add_handler(MessageHandler(filters.Regex("^üìÖ –ó–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ$"), manual_daily_report))

    application.run_polling()

if __name__ == '__main__':
    main()
